{"version":3,"sources":["components/Home.js","constants.js","components/Breed.js","App.js","serviceWorker.js","index.js"],"names":["Home","_ref","breeds","loadingError","react_default","a","createElement","className","AppBar","position","color","Toolbar","Typography","variant","Container","maxWidth","List","map","breed","index","breedId","breedName","key","ListItem","button","component","Link","to","concat","ListItemIcon","Icon","ListItemText","primary","Divider","defaultProps","DOG_API_URL","BreedDetail","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getBreedImage","id","nextState","setState","isLoading","fetch","Constants","then","raw","json","imgUrl","message","catch","err","finally","state","name","match","params","displayName","indexOf","split","reverse","join","_this2","_this$state","Card","CardMedia","image","title","CardActions","Fab","size","onClick","CircularProgress","Component","history","location","App","mapBreeds","mappedBreeds","keys","reduce","acc","cur","length","forEach","sb","push","homeProps","react_router_dom","react_router","exact","path","render","components_Home","assign","Breed","Boolean","window","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb5f178d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Divider from '@material-ui/core/Divider';\nimport Icon from '@material-ui/core/Icon';\n\nconst Home = ({breeds, loadingError}) => {\n  return (\n    <div className=\"home\">\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\">Breed List</Typography>\n        </Toolbar>\n      </AppBar>\n      <Container\n        className=\"breed-list-container\" maxWidth=\"xs\">\n        {loadingError && <div className=\"error-message\">{loadingError}</div>}\n        {!loadingError && (\n          <List>\n            {breeds.map((breed, index) => {\n              const { breedId, breedName } = breed;\n              return (\n                <div key={index}>\n                  <ListItem\n                    button\n                    component={Link}\n                    to={`/breed/${breedId}`}>\n                    <ListItemIcon>\n                      <Icon>pets</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={breedName}/>\n                  </ListItem>\n                  <Divider/>\n                </div>\n              );\n            })}\n          </List>\n        )}\n      </Container>\n    </div>\n  )\n};\n\nHome.propTypes = {\n  breeds: PropTypes.arrayOf(PropTypes.object),\n  loadingError: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nHome.defaultProps = {\n  breeds: [],\n  loadingError: null,\n};\n\nexport default Home;","export const DOG_API_URL = 'https://dog.ceo/api';","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardActions from '@material-ui/core/CardActions';\nimport Fab from '@material-ui/core/Fab';\nimport Icon from '@material-ui/core/Icon';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as Constants from '../constants';\n\nexport default class BreedDetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      breedId: null,\n      breedName: null,\n      imgUrl: null,\n      isLoading: false,\n      loadingError: null,\n    };\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    const { name } = match.params;\n\n    // if name is hyphenated, then it is <breed>-<subbreed>\n    // parse name for better display\n    let displayName = name;\n    if (displayName.indexOf('-') >= 0) displayName = name.split('-').reverse().join(' ');\n\n    this.setState({\n      breedId: name,\n      breedName: displayName,\n    });\n\n    this.getBreedImage(name);\n  }\n\n  getBreedImage = id => {\n    let nextState = {};\n\n    // reset loadingError and set isLoading to true while fetch is executing\n    this.setState({ isLoading: true, loadingError: null });\n\n    // fetch random image of this dog breed\n    fetch(`${Constants.DOG_API_URL}/breed/${id}/images/random`)\n    .then(raw => raw.json())\n    .then(breed => nextState.imgUrl = breed.message)\n    .catch(err => nextState.loadingError = err.message || err)\n    .finally(() => {\n      nextState.isLoading = false;\n      this.setState(nextState);\n    });\n  }\n\n  render() {\n    const { breedId, breedName, imgUrl, isLoading, loadingError } = this.state;\n\n    return (\n      <div className=\"breed-detail\">\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h6\">{breedName}</Typography>\n          </Toolbar>\n        </AppBar>\n        <Container className=\"card\" maxWidth=\"xs\">\n          <Card>\n            {imgUrl && <CardMedia image={imgUrl} title={breedName}/>}\n            {(!imgUrl || loadingError) && (\n              <div className=\"no-image\">\n                {`${loadingError || 'Loading...'}`}\n              </div>\n            )}\n            <CardActions>\n              <Fab\n                variant=\"extended\"\n                size=\"medium\"\n                color=\"primary\"\n                title=\"Go back\"\n                component={Link}\n                to=\"/\">\n                <Icon>chevron_left</Icon>\n                Back to list\n              </Fab>\n              <Fab\n                variant=\"extended\"\n                size=\"medium\"\n                color=\"primary\"\n                title=\"Load new image\"\n                onClick={() => this.getBreedImage(breedId)}>\n                <Icon>refresh</Icon>\n              </Fab>\n              {isLoading && <CircularProgress size={30} className=\"breed-refresh\"/>}\n            </CardActions>\n          </Card>\n        </Container>\n      </div>\n    )\n  }\n}\n\nBreedDetail.propTypes = {\n  history: PropTypes.object,\n  location: PropTypes.object,\n  match: PropTypes.object,\n}\n\nBreedDetail.defaultProps = {\n  history: {},\n  location: {},\n  match: {},\n}","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Breed from './components/Breed';\nimport * as Constants from './constants';\n\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      breeds: [],\n      loadingError: null,\n    };\n  }\n\n  componentDidMount() {\n    // fetch list of dog breeds\n    fetch(`${Constants.DOG_API_URL}/breeds/list/all`)\n    .then(raw => raw.json())\n    .then(breeds => this.setState({breeds: this.mapBreeds(breeds.message)}))\n    .catch(err => this.setState({loadingError: err.message || err}));\n  }\n\n  mapBreeds = breeds => {\n    // breeds should be an array of objects in the shape: \n    // { breedId: <breed>[-<subbreed>], breedName: [<subbreed> ]<breed> }\n    let mappedBreeds = [];\n\n    Object.keys(breeds).reduce((acc, cur) => {\n      const breed = breeds[cur];\n      const hasSubBreeds = breed.length > 0;\n\n      if (hasSubBreeds) {\n        breed.forEach(sb => {\n          mappedBreeds.push({\n            breedId: `${cur}-${sb}`,\n            breedName: `${sb} ${cur}`\n          });\n        })\n      } else {\n        mappedBreeds.push({\n          breedId: cur,\n          breedName: cur,\n        });\n      }\n      \n      return acc;\n    }, mappedBreeds);\n\n    return mappedBreeds;\n  }\n\n  render() {\n    const { breeds, loadingError } = this.state;\n    const homeProps = {\n      breeds,\n      loadingError\n    };\n\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' render={props => <Home {...props} {...homeProps}/>} />\n            <Route path='/breed/:name' component={Breed} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}